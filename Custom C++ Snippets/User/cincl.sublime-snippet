<snippet>
	<content><![CDATA[
// @BEGIN_OF_SOURCE_CODE 
#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <string>
#include <cctype>
#include <stack>
#include <queue>
#include <list>
#include <vector>
#include <map>
#include <sstream>
#include <cmath>
#include <bitset>
#include <utility>
#include <set>
#include <numeric>
#include <ctime>
#include <cstdlib>
 
#define Inf 2147483647
#define Pi acos(-1.0)
#define N 1000000
#define LL long long
 
inline LL Power(int b, int p) { LL ret = 1; for ( int i = 1; i <= p; i++ ) ret *= b; return ret; }
const int dr [] = {-1, -1, 0, 1, 1, 1, 0, -1};
const int dc [] = {0, 1, 1, 1, 0, -1, -1, -1};
 
#define all(c) c.begin(), c.end()	//for selecting all items in a container
#define F(i, a) for( int i = (0); i < (a); i++ )
#define Fs(i, sz) for( size_t i = 0; i < sz.size (); i++ )
#define Set(a, s) memset(a, s, sizeof (a))
#define Max(a, b)  (a < b ? b : a)	//max fnction
#define Min(a, b)  (a > b ? b : a)	//min function
#define present(container, element) (container.find(element) != container.end()) 		//check if element in container for map/set
#define cpresent(container, element) (find(all(container),element) != container.end()) 	//check if element in container for vector
#define tr(container, it) for(typeof(container.begin()) it = container.begin(); it != container.end(); it++) 
 
using namespace std;
 
int main(int argc, const char ** argv[]) 
{
     $0
    return 0;   
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>cincl</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
